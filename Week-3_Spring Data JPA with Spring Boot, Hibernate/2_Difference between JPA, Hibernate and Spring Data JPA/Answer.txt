Exercise 4: Understa------
3. Spring Data JPA Module

- Spring Data JPA functions as a Spring ecosystem module that operates above JPA and Hibernate layers.
- Rather than implementing JPA directly, it provides an abstraction framework to streamline data access operations.
- It minimizes repetitive code by automatically creating repository implementation classes.
- It provides seamless integration with Spring's dependency injection framework and transaction management capabilities.he Distinctions Between JPA, Hibernate, and Spring Data JPA

Solution:

------
1. Java Persistence API (JPA) Overview

- JPA serves as a standardized specification (JSR 338) for handling persistence operations between Java objects and relational database systems.
- It establishes a comprehensive set of interfaces and annotations for Object-Relational Mapping (ORM) functionality.
- JPA functions purely as a specification without actual implementation — requiring persistence providers such as Hibernate for functionality.
- It creates uniformity in how Java applications perform database interactions across different vendors.

------
2. Hibernate Framework

- Hibernate represents a robust ORM framework and serves as the predominant implementation of JPA specifications.
- It delivers concrete functionality for persisting Java objects into database structures.
- Hibernate extends beyond basic JPA capabilities, incorporating advanced features like caching mechanisms, native SQL support, and performance optimization tools.
- Applications using Hibernate directly require manual management of sessions and transaction handling.

------
3. Spring Data JPA

- Spring Data JPA is a Spring module that builds on top of JPA and Hibernate.
- It does not implement JPA itself but provides an abstraction layer to simplify data access.
- It reduces boilerplate code by automatically generating repository implementations.
- It integrates seamlessly with Spring’s dependency injection and transaction management.

------
4. Comparison Table

| Feature                        | JPA   | Hibernate | Spring Data JPA |
|-------------------------------|-------|-----------|------------------|
| Type                          | Specification | Implementation | Abstraction over JPA/Hibernate |
| Provides ORM functionality    | No    | Yes       | Yes              |
| Reduces boilerplate code      | No    | No        | Yes              |
| Manages transactions          | No    | Yes       | Yes              |
| Requires manual session mgmt  | No    | Yes       | No               |
| Repository abstraction        | No    | No        | Yes              |

------
5. Code Snippets

Hibernate Example (Manual Session and Transaction Handling):

/* Method to CREATE an employee in the database */
public Integer addEmployee(Employee employee){
   Session session = factory.openSession();
   Transaction tx = null;
   Integer employeeID = null;
   
   try {
      tx = session.beginTransaction();
      employeeID = (Integer) session.save(employee); 
      tx.commit();
   } catch (HibernateException e) {
      if (tx != null) tx.rollback();
      e.printStackTrace(); 
   } finally {
      session.close(); 
   }
   return employeeID;
}

Spring Data JPA Example (Simplified Repository-Based Approach):

EmployeeRepository.java
public interface EmployeeRepository extends JpaRepository<Employee, Integer> {
}

EmployeeService.java
@Autowired
private EmployeeRepository employeeRepository;

@Transactional
public void addEmployee(Employee employee) {
    employeeRepository.save(employee);
}

------
6. Summary

- JPA defines the standard for ORM in Java.
- Hibernate is a concrete implementation of JPA and provides the actual persistence logic.
- Spring Data JPA builds on top of JPA and Hibernate to simplify development by eliminating boilerplate code and providing powerful repository abstractions.

------
7. References

- https://dzone.com/articles/what-is-the-difference-between-hibernate-and-sprin-1
- https://www.javaworld.com/article/3379043/what-is-jpa-introduction-to-the-java-persistence-api.html